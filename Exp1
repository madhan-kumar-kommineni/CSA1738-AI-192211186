import heapq

# Get the initial state from the user
print("Enter the initial state of the puzzle (use 0 for the blank tile):")
initial_state = []
for i in range(3):
    initial_state.append(list(map(int, input().split())))

# Define the goal state
goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

# Manhattan distance heuristic
def manhattan_distance(board):
    distance = 0
    for i in range(3):
        for j in range(3):
            if board[i][j] != 0:
                x, y = divmod(board[i][j] - 1, 3)
                distance += abs(x - i) + abs(y - j)
    return distance

# Check if two states are equal
def is_goal(board):
    return board == goal_state

# Generate neighbors
def get_neighbors(board):
    neighbors = []
    x, y = [(i, j) for i in range(3) for j in range(3) if board[i][j] == 0][0]
    directions = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]
    for dx, dy in directions:
        if 0 <= dx < 3 and 0 <= dy < 3:
            new_board = [row[:] for row in board]
            new_board[x][y], new_board[dx][dy] = new_board[dx][dy], new_board[x][y]
            neighbors.append(new_board)
    return neighbors

# A* search
open_set = []
heapq.heappush(open_set, (manhattan_distance(initial_state), 0, initial_state, []))
visited = set()

while open_set:
    _, move_count, current_state, path = heapq.heappop(open_set)

    if is_goal(current_state):
        path.append(current_state)
        break

    state_tuple = tuple(tuple(row) for row in current_state)
    if state_tuple in visited:
        continue
    visited.add(state_tuple)

    for neighbor in get_neighbors(current_state):
        new_path = path + [current_state]
        heapq.heappush(open_set, (move_count + 1 + manhattan_distance(neighbor), move_count + 1, neighbor, new_path))

# Print the solution path
print("Solution path:")
for step in path:
    for row in step:
        print(row)
    print()
