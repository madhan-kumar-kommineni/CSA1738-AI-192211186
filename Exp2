def is_safe(board, row, col):
    for i in range(row):
        if board[i] == col:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i] == j:
            return False
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i] == j:
            return False
    return True

def solve_nqueens(board, row):
    if row == len(board):
        return True
    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row] = col
            if solve_nqueens(board, row + 1):
                return True
            board[row] = -1
    return False

def print_board(board):
    for row in range(len(board)):
        line = ""
        for col in range(len(board)):
            if board[row] == col:
                line += "Q "
            else:
                line += ". "
        print(line)
    print()

def main():
    n = 8
    board = [-1] * n
    if solve_nqueens(board, 0):
        print("Solution:")
        print_board(board)
    else:
        print("No solution found")

if __name__ == "__main__":
    main()
